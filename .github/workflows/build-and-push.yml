name: Mock env output

on:
  push:
    branches:
      - mock
      - main
      - stage
      - run-integration-tests
    tags:
      - '*'

  workflow_dispatch:
    inputs:
      ref:
        description: 'ref to be deployed (e.g. "refs/heads/main", "v1.0.0", "2c0472cf")'
        type: string
        required: true
        default: refs/heads/main
env:
  APP: springfield
  GAR_LOCATION: us
  GCP_PROJECT_ID: moz-fx-springfield-prod
  GAR_REPOSITORY: springfield-prod
  IMAGE: springfield
  ORG: mozmeao
  REF_ID: ${{ github.event.inputs.ref || github.ref }}


jobs:
  build_and_publish_public_images:
    name: Build and push public images
    runs-on: ubuntu-latest
    outputs:
      long_sha: ${{ env.LONG_SHA }}
      deployment_env: ${{ env.DEPLOYMENT_ENV }}
      deployment_realm: ${{ env.DEPLOYMENT_REALM }}
      image_tag: ${{ env.TAG }}

    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 10 # get enough so we have a Git history, but not everything
            fetch-tags: true
            ref: ${{ env.REF_ID }}

      - id: long-sha
        name: Use full SHA for tagging images
        run: |-
          echo "LONG_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: On main set dev-nonprod
        if: github.ref == 'refs/heads/main'  # Updates to the main branch are deployed to dev.
        run: |
          echo TAG="dev-$LONG_SHA" >> $GITHUB_ENV
          echo DEPLOYMENT_ENV=dev >> $GITHUB_ENV
          echo DEPLOYMENT_REALM=nonprod >> $GITHUB_ENV

      - name: On run-integration-tests set test-nonprod
        if: github.ref == 'refs/heads/run-integration-tests'  # Updates to the run-integration-tests branch are deployed to test.
        run: |
          echo TAG="test-$LONG_SHA" >> $GITHUB_ENV
          echo DEPLOYMENT_ENV=test >> $GITHUB_ENV
          echo DEPLOYMENT_REALM=nonprod >> $GITHUB_ENV

      - name: On mock set stage-nonprod
        if: github.ref == 'refs/heads/mock'  # Updates to the mock branch are deployed to stage.
        run: |
            echo TAG="stage-$LONG_SHA" >> $GITHUB_ENV
            echo DEPLOYMENT_ENV=stage >> $GITHUB_ENV
            echo DEPLOYMENT_REALM=nonprod >> $GITHUB_ENV

      - name: On tag set prod-prod
        if: startsWith(github.ref, 'refs/tags/')  # Version tags are deployed to prod.
        run: |
          echo TAG="prod-$LONG_SHA" >> $GITHUB_ENV
          echo DEPLOYMENT_ENV=prod >> $GITHUB_ENV
          echo DEPLOYMENT_REALM=prod >> $GITHUB_ENV

      - name: Build and push public images to Docker Hub
        run: |
            echo "$RUNNER_CONTEXT"
            echo "$STRATEGY_CONTEXT"
            echo "$MATRIX_CONTEXT"
        timeout-minutes: 90
        env:
            RUNNER_CONTEXT: ${{ toJson(runner) }}
            STRATEGY_CONTEXT: ${{ toJson(strategy) }}
            MATRIX_CONTEXT: ${{ toJson(matrix) }}
            GIT_COMMIT: ${{ env.LONG_SHA }}


  upload_static_assets:
    name: Upload static assets to GCS
    runs-on: ubuntu-latest
    environment: build
    needs: build_and_publish_public_images
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Generate hashes and rsync to gs://
        run: |-
            echo ASSETS-TMP=$ORG/$IMAGE:${{ needs.build_and_publish_public_images.outputs.long_sha }} >> $GITHUB_ENV
            echo GS=$APP-${{ needs.build_and_publish_public_images.outputs.deployment_realm }}-${{ needs.build_and_publish_public_images.outputs.deployment_env }}-media/media/ >> $GITHUB_ENV

      - name: (log)
        run: |
            echo "$RUNNER_CONTEXT"
            echo "$STRATEGY_CONTEXT"
            echo "$MATRIX_CONTEXT"
        env:
            RUNNER_CONTEXT: ${{ toJson(runner) }}
            STRATEGY_CONTEXT: ${{ toJson(strategy) }}
            MATRIX_CONTEXT: ${{ toJson(matrix) }}


  push_image_to_gar:
    name: Push springfield image to GAR
    needs: [build_and_publish_public_images, upload_static_assets]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Add deployment tag to existing image and push to GAR
        run: |-
             echo DOCKER-PULL=$ORG/$IMAGE:${{ needs.build_and_publish_public_images.outputs.long_sha }} >> $GITHUB_ENV
             echo DOCKER-TAG=$ORG/$IMAGE:${{ needs.build_and_publish_public_images.outputs.long_sha }}+${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY}}/${{ env.IMAGE }}:${{ needs.build_and_publish_public_images.outputs.image_tag }} >> $GITHUB_ENV
             echo DOCKER-PUSH=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY}}/${{ env.IMAGE }}:${{ needs.build_and_publish_public_images.outputs.image_tag }} >> $GITHUB_ENV
      - name: (log)
        run: |
            echo "$RUNNER_CONTEXT"
            echo "$STRATEGY_CONTEXT"
            echo "$MATRIX_CONTEXT"
        env:
            RUNNER_CONTEXT: ${{ toJson(runner) }}
            STRATEGY_CONTEXT: ${{ toJson(strategy) }}
            MATRIX_CONTEXT: ${{ toJson(matrix) }}
